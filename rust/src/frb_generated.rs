// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.22.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.22";

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_delete_financial_card_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "delete_financial_card",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || crate::api::simple::delete_financial_card(api_id))())
            }
        },
    )
}
fn wire_delete_identity_card_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "delete_identity_card",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || crate::api::simple::delete_identity_card(api_id))())
            }
        },
    )
}
fn wire_delete_login_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "delete_login", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::simple::delete_login(api_id)
                    })())
                } })
}
fn wire_delete_note_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "delete_note",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| transform_result_sse((move || crate::api::simple::delete_note(api_id))())
        },
    )
}
fn wire_get_financial_card_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_financial_card",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || crate::api::simple::get_financial_card(api_id))())
            }
        },
    )
}
fn wire_get_identity_card_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_identity_card",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || crate::api::simple::get_identity_card(api_id))())
            }
        },
    )
}
fn wire_get_login_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_login",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| transform_result_sse((move || crate::api::simple::get_login(api_id))())
        },
    )
}
fn wire_get_note_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_note",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| transform_result_sse((move || crate::api::simple::get_note(api_id))())
        },
    )
}
fn wire_greet_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "greet",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
            })())
        },
    )
}
fn wire_init_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_db_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::simple::init(api_db_path))
                })())
            }
        },
    )
}
fn wire_init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse(
                    (move || Result::<_, ()>::Ok(crate::api::simple::init_app()))(),
                )
            }
        },
    )
}
fn wire_list_financial_card_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "list_financial_card",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_query = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || crate::api::simple::list_financial_card(api_query))())
            }
        },
    )
}
fn wire_list_login_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "list_login",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_query = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || crate::api::simple::list_login(api_query))())
            }
        },
    )
}
fn wire_list_note_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "list_note", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_query = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::simple::list_note(api_query)
                    })())
                } })
}
fn wire_post_financial_card_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "post_financial_card",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data =
                <crate::models::finantial_cards::FinantialCard>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || crate::api::simple::post_financial_card(api_data))())
            }
        },
    )
}
fn wire_post_identity_card_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "post_identity_card",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data =
                <crate::models::identity_cards::IdentityCard>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || crate::api::simple::post_identity_card(api_data))())
            }
        },
    )
}
fn wire_post_login_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "post_login", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <crate::models::logins::Login>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::simple::post_login(api_data)
                    })())
                } })
}
fn wire_post_note_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "post_note",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <crate::models::notes::Note>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| transform_result_sse((move || crate::api::simple::post_note(api_data))())
        },
    )
}
fn wire_put_financial_card_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "put_financial_card",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <String>::sse_decode(&mut deserializer);
            let api_data =
                <crate::models::finantial_cards::FinantialCard>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::simple::put_financial_card(api_id, api_data)
                })())
            }
        },
    )
}
fn wire_put_identity_card_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "put_identity_card",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <String>::sse_decode(&mut deserializer);
            let api_data =
                <crate::models::identity_cards::IdentityCard>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::simple::put_identity_card(api_id, api_data)
                })())
            }
        },
    )
}
fn wire_put_login_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "put_login",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <String>::sse_decode(&mut deserializer);
            let api_data = <crate::models::logins::Login>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || crate::api::simple::put_login(api_id, api_data))())
            }
        },
    )
}
fn wire_put_note_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "put_note",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <String>::sse_decode(&mut deserializer);
            let api_data = <crate::models::notes::Note>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || crate::api::simple::put_note(api_id, api_data))())
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unreachable!("");
    }
}

impl SseDecode for chrono::NaiveDateTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::NaiveDateTime::from_timestamp_micros(inner)
            .expect("invalid or out-of-range datetime");
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::models::finantial_cards::FinantialCard {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <Option<String>>::sse_decode(deserializer);
        let mut var_createdAt = <Option<chrono::NaiveDateTime>>::sse_decode(deserializer);
        let mut var_createdBy = <Option<String>>::sse_decode(deserializer);
        let mut var_updatedAt = <Option<chrono::NaiveDateTime>>::sse_decode(deserializer);
        let mut var_updatedBy = <Option<String>>::sse_decode(deserializer);
        let mut var_cardHolderName = <String>::sse_decode(deserializer);
        let mut var_cardNumber = <String>::sse_decode(deserializer);
        let mut var_cardProviderName = <Option<String>>::sse_decode(deserializer);
        let mut var_cardType = <Option<String>>::sse_decode(deserializer);
        let mut var_cvv = <Option<String>>::sse_decode(deserializer);
        let mut var_expiryDate = <Option<String>>::sse_decode(deserializer);
        let mut var_issueDate = <Option<String>>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_note = <Option<String>>::sse_decode(deserializer);
        let mut var_pin = <Option<String>>::sse_decode(deserializer);
        return crate::models::finantial_cards::FinantialCard {
            id: var_id,
            created_at: var_createdAt,
            created_by: var_createdBy,
            updated_at: var_updatedAt,
            updated_by: var_updatedBy,
            card_holder_name: var_cardHolderName,
            card_number: var_cardNumber,
            card_provider_name: var_cardProviderName,
            card_type: var_cardType,
            cvv: var_cvv,
            expiry_date: var_expiryDate,
            issue_date: var_issueDate,
            name: var_name,
            note: var_note,
            pin: var_pin,
        };
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::models::identity_cards::IdentityCard {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <Option<String>>::sse_decode(deserializer);
        let mut var_createdAt = <Option<chrono::NaiveDateTime>>::sse_decode(deserializer);
        let mut var_createdBy = <Option<String>>::sse_decode(deserializer);
        let mut var_updatedAt = <Option<chrono::NaiveDateTime>>::sse_decode(deserializer);
        let mut var_updatedBy = <Option<String>>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_note = <Option<String>>::sse_decode(deserializer);
        let mut var_country = <Option<String>>::sse_decode(deserializer);
        let mut var_expiryDate = <Option<String>>::sse_decode(deserializer);
        let mut var_identityCardNumber = <String>::sse_decode(deserializer);
        let mut var_identityCardType = <Option<String>>::sse_decode(deserializer);
        let mut var_issueDate = <Option<String>>::sse_decode(deserializer);
        let mut var_nameOnCard = <String>::sse_decode(deserializer);
        let mut var_state = <Option<String>>::sse_decode(deserializer);
        return crate::models::identity_cards::IdentityCard {
            id: var_id,
            created_at: var_createdAt,
            created_by: var_createdBy,
            updated_at: var_updatedAt,
            updated_by: var_updatedBy,
            name: var_name,
            note: var_note,
            country: var_country,
            expiry_date: var_expiryDate,
            identity_card_number: var_identityCardNumber,
            identity_card_type: var_identityCardType,
            issue_date: var_issueDate,
            name_on_card: var_nameOnCard,
            state: var_state,
        };
    }
}

impl SseDecode for Vec<crate::models::finantial_cards::FinantialCard> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::finantial_cards::FinantialCard>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::logins::Login> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::logins::Login>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::notes::Note> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::notes::Note>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::models::logins::Login {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <Option<String>>::sse_decode(deserializer);
        let mut var_createdAt = <Option<chrono::NaiveDateTime>>::sse_decode(deserializer);
        let mut var_createdBy = <Option<String>>::sse_decode(deserializer);
        let mut var_updatedAt = <Option<chrono::NaiveDateTime>>::sse_decode(deserializer);
        let mut var_updatedBy = <Option<String>>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_note = <Option<String>>::sse_decode(deserializer);
        let mut var_username = <String>::sse_decode(deserializer);
        let mut var_url = <Option<String>>::sse_decode(deserializer);
        let mut var_password = <Option<String>>::sse_decode(deserializer);
        let mut var_passwordHint = <Option<String>>::sse_decode(deserializer);
        return crate::models::logins::Login {
            id: var_id,
            created_at: var_createdAt,
            created_by: var_createdBy,
            updated_at: var_updatedAt,
            updated_by: var_updatedBy,
            name: var_name,
            note: var_note,
            username: var_username,
            url: var_url,
            password: var_password,
            password_hint: var_passwordHint,
        };
    }
}

impl SseDecode for crate::models::notes::Note {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <Option<String>>::sse_decode(deserializer);
        let mut var_createdAt = <Option<chrono::NaiveDateTime>>::sse_decode(deserializer);
        let mut var_createdBy = <Option<String>>::sse_decode(deserializer);
        let mut var_updatedAt = <Option<chrono::NaiveDateTime>>::sse_decode(deserializer);
        let mut var_updatedBy = <Option<String>>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_note = <Option<String>>::sse_decode(deserializer);
        return crate::models::notes::Note {
            id: var_id,
            created_at: var_createdAt,
            created_by: var_createdBy,
            updated_at: var_updatedAt,
            updated_by: var_updatedBy,
            name: var_name,
            note: var_note,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::NaiveDateTime> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<chrono::NaiveDateTime>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        12 => wire_delete_financial_card_impl(port, ptr, rust_vec_len, data_len),
        17 => wire_delete_identity_card_impl(port, ptr, rust_vec_len, data_len),
        7 => wire_delete_login_impl(port, ptr, rust_vec_len, data_len),
        21 => wire_delete_note_impl(port, ptr, rust_vec_len, data_len),
        9 => wire_get_financial_card_impl(port, ptr, rust_vec_len, data_len),
        14 => wire_get_identity_card_impl(port, ptr, rust_vec_len, data_len),
        4 => wire_get_login_impl(port, ptr, rust_vec_len, data_len),
        18 => wire_get_note_impl(port, ptr, rust_vec_len, data_len),
        3 => wire_init_impl(port, ptr, rust_vec_len, data_len),
        2 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
        13 => wire_list_financial_card_impl(port, ptr, rust_vec_len, data_len),
        8 => wire_list_login_impl(port, ptr, rust_vec_len, data_len),
        22 => wire_list_note_impl(port, ptr, rust_vec_len, data_len),
        10 => wire_post_financial_card_impl(port, ptr, rust_vec_len, data_len),
        15 => wire_post_identity_card_impl(port, ptr, rust_vec_len, data_len),
        5 => wire_post_login_impl(port, ptr, rust_vec_len, data_len),
        19 => wire_post_note_impl(port, ptr, rust_vec_len, data_len),
        11 => wire_put_financial_card_impl(port, ptr, rust_vec_len, data_len),
        16 => wire_put_identity_card_impl(port, ptr, rust_vec_len, data_len),
        6 => wire_put_login_impl(port, ptr, rust_vec_len, data_len),
        20 => wire_put_note_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire_greet_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::finantial_cards::FinantialCard {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.created_by.into_into_dart().into_dart(),
            self.updated_at.into_into_dart().into_dart(),
            self.updated_by.into_into_dart().into_dart(),
            self.card_holder_name.into_into_dart().into_dart(),
            self.card_number.into_into_dart().into_dart(),
            self.card_provider_name.into_into_dart().into_dart(),
            self.card_type.into_into_dart().into_dart(),
            self.cvv.into_into_dart().into_dart(),
            self.expiry_date.into_into_dart().into_dart(),
            self.issue_date.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.note.into_into_dart().into_dart(),
            self.pin.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::finantial_cards::FinantialCard
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::finantial_cards::FinantialCard>
    for crate::models::finantial_cards::FinantialCard
{
    fn into_into_dart(self) -> crate::models::finantial_cards::FinantialCard {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::identity_cards::IdentityCard {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.created_by.into_into_dart().into_dart(),
            self.updated_at.into_into_dart().into_dart(),
            self.updated_by.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.note.into_into_dart().into_dart(),
            self.country.into_into_dart().into_dart(),
            self.expiry_date.into_into_dart().into_dart(),
            self.identity_card_number.into_into_dart().into_dart(),
            self.identity_card_type.into_into_dart().into_dart(),
            self.issue_date.into_into_dart().into_dart(),
            self.name_on_card.into_into_dart().into_dart(),
            self.state.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::identity_cards::IdentityCard
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::identity_cards::IdentityCard>
    for crate::models::identity_cards::IdentityCard
{
    fn into_into_dart(self) -> crate::models::identity_cards::IdentityCard {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::logins::Login {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.created_by.into_into_dart().into_dart(),
            self.updated_at.into_into_dart().into_dart(),
            self.updated_by.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.note.into_into_dart().into_dart(),
            self.username.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
            self.password.into_into_dart().into_dart(),
            self.password_hint.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::logins::Login {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::logins::Login>
    for crate::models::logins::Login
{
    fn into_into_dart(self) -> crate::models::logins::Login {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::notes::Note {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.created_by.into_into_dart().into_dart(),
            self.updated_at.into_into_dart().into_dart(),
            self.updated_by.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.note.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::notes::Note {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::notes::Note> for crate::models::notes::Note {
    fn into_into_dart(self) -> crate::models::notes::Note {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for chrono::NaiveDateTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.timestamp_micros(), serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::models::finantial_cards::FinantialCard {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.id, serializer);
        <Option<chrono::NaiveDateTime>>::sse_encode(self.created_at, serializer);
        <Option<String>>::sse_encode(self.created_by, serializer);
        <Option<chrono::NaiveDateTime>>::sse_encode(self.updated_at, serializer);
        <Option<String>>::sse_encode(self.updated_by, serializer);
        <String>::sse_encode(self.card_holder_name, serializer);
        <String>::sse_encode(self.card_number, serializer);
        <Option<String>>::sse_encode(self.card_provider_name, serializer);
        <Option<String>>::sse_encode(self.card_type, serializer);
        <Option<String>>::sse_encode(self.cvv, serializer);
        <Option<String>>::sse_encode(self.expiry_date, serializer);
        <Option<String>>::sse_encode(self.issue_date, serializer);
        <String>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.note, serializer);
        <Option<String>>::sse_encode(self.pin, serializer);
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::models::identity_cards::IdentityCard {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.id, serializer);
        <Option<chrono::NaiveDateTime>>::sse_encode(self.created_at, serializer);
        <Option<String>>::sse_encode(self.created_by, serializer);
        <Option<chrono::NaiveDateTime>>::sse_encode(self.updated_at, serializer);
        <Option<String>>::sse_encode(self.updated_by, serializer);
        <String>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.note, serializer);
        <Option<String>>::sse_encode(self.country, serializer);
        <Option<String>>::sse_encode(self.expiry_date, serializer);
        <String>::sse_encode(self.identity_card_number, serializer);
        <Option<String>>::sse_encode(self.identity_card_type, serializer);
        <Option<String>>::sse_encode(self.issue_date, serializer);
        <String>::sse_encode(self.name_on_card, serializer);
        <Option<String>>::sse_encode(self.state, serializer);
    }
}

impl SseEncode for Vec<crate::models::finantial_cards::FinantialCard> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::finantial_cards::FinantialCard>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::logins::Login> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::logins::Login>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::notes::Note> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::notes::Note>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::models::logins::Login {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.id, serializer);
        <Option<chrono::NaiveDateTime>>::sse_encode(self.created_at, serializer);
        <Option<String>>::sse_encode(self.created_by, serializer);
        <Option<chrono::NaiveDateTime>>::sse_encode(self.updated_at, serializer);
        <Option<String>>::sse_encode(self.updated_by, serializer);
        <String>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.note, serializer);
        <String>::sse_encode(self.username, serializer);
        <Option<String>>::sse_encode(self.url, serializer);
        <Option<String>>::sse_encode(self.password, serializer);
        <Option<String>>::sse_encode(self.password_hint, serializer);
    }
}

impl SseEncode for crate::models::notes::Note {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.id, serializer);
        <Option<chrono::NaiveDateTime>>::sse_encode(self.created_at, serializer);
        <Option<String>>::sse_encode(self.created_by, serializer);
        <Option<chrono::NaiveDateTime>>::sse_encode(self.updated_at, serializer);
        <Option<String>>::sse_encode(self.updated_by, serializer);
        <String>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.note, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::NaiveDateTime> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::NaiveDateTime>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
