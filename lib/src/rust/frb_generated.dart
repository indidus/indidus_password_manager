// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.25.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'models/financial_cards.dart';
import 'models/identity_cards.dart';
import 'models/logins.dart';
import 'models/notes.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.initApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.25';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<FinancialCard> deleteFinancialCard({required String id, dynamic hint});

  Future<IdentityCard> deleteIdentityCard({required String id, dynamic hint});

  Future<Login> deleteLogin({required String id, dynamic hint});

  Future<Note> deleteNote({required String id, dynamic hint});

  Future<FinancialCard> getFinancialCard({required String id, dynamic hint});

  Future<IdentityCard> getIdentityCard({required String id, dynamic hint});

  Future<Login> getLogin({required String id, dynamic hint});

  Future<Note> getNote({required String id, dynamic hint});

  String greet({required String name, dynamic hint});

  Future<bool> init({required String dbPath, dynamic hint});

  Future<void> initApp({dynamic hint});

  Future<List<FinancialCard>> listFinancialCard(
      {required String query, dynamic hint});

  Future<List<IdentityCard>> listIdentityCard(
      {required String query, dynamic hint});

  Future<List<Login>> listLogin({required String query, dynamic hint});

  Future<List<Note>> listNote({required String query, dynamic hint});

  Future<FinancialCard> postFinancialCard(
      {required FinancialCard data, dynamic hint});

  Future<IdentityCard> postIdentityCard(
      {required IdentityCard data, dynamic hint});

  Future<Login> postLogin({required Login data, dynamic hint});

  Future<Note> postNote({required Note data, dynamic hint});

  Future<FinancialCard> putFinancialCard(
      {required String id, required FinancialCard data, dynamic hint});

  Future<IdentityCard> putIdentityCard(
      {required String id, required IdentityCard data, dynamic hint});

  Future<Login> putLogin(
      {required String id, required Login data, dynamic hint});

  Future<Note> putNote({required String id, required Note data, dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<FinancialCard> deleteFinancialCard(
      {required String id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_financial_card,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDeleteFinancialCardConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDeleteFinancialCardConstMeta => const TaskConstMeta(
        debugName: "delete_financial_card",
        argNames: ["id"],
      );

  @override
  Future<IdentityCard> deleteIdentityCard({required String id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_identity_card,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDeleteIdentityCardConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDeleteIdentityCardConstMeta => const TaskConstMeta(
        debugName: "delete_identity_card",
        argNames: ["id"],
      );

  @override
  Future<Login> deleteLogin({required String id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_login,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDeleteLoginConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDeleteLoginConstMeta => const TaskConstMeta(
        debugName: "delete_login",
        argNames: ["id"],
      );

  @override
  Future<Note> deleteNote({required String id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_note,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDeleteNoteConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDeleteNoteConstMeta => const TaskConstMeta(
        debugName: "delete_note",
        argNames: ["id"],
      );

  @override
  Future<FinancialCard> getFinancialCard({required String id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_financial_card,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kGetFinancialCardConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetFinancialCardConstMeta => const TaskConstMeta(
        debugName: "get_financial_card",
        argNames: ["id"],
      );

  @override
  Future<IdentityCard> getIdentityCard({required String id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_identity_card,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kGetIdentityCardConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetIdentityCardConstMeta => const TaskConstMeta(
        debugName: "get_identity_card",
        argNames: ["id"],
      );

  @override
  Future<Login> getLogin({required String id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_login,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kGetLoginConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetLoginConstMeta => const TaskConstMeta(
        debugName: "get_login",
        argNames: ["id"],
      );

  @override
  Future<Note> getNote({required String id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_note,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kGetNoteConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetNoteConstMeta => const TaskConstMeta(
        debugName: "get_note",
        argNames: ["id"],
      );

  @override
  String greet({required String name, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kGreetConstMeta,
      argValues: [name],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<bool> init({required String dbPath, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dbPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kInitConstMeta,
      argValues: [dbPath],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitConstMeta => const TaskConstMeta(
        debugName: "init",
        argNames: ["dbPath"],
      );

  @override
  Future<void> initApp({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitAppConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<List<FinancialCard>> listFinancialCard(
      {required String query, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(query, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_financial_card,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kListFinancialCardConstMeta,
      argValues: [query],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListFinancialCardConstMeta => const TaskConstMeta(
        debugName: "list_financial_card",
        argNames: ["query"],
      );

  @override
  Future<List<IdentityCard>> listIdentityCard(
      {required String query, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(query, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_identity_card,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kListIdentityCardConstMeta,
      argValues: [query],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListIdentityCardConstMeta => const TaskConstMeta(
        debugName: "list_identity_card",
        argNames: ["query"],
      );

  @override
  Future<List<Login>> listLogin({required String query, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(query, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_login,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kListLoginConstMeta,
      argValues: [query],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListLoginConstMeta => const TaskConstMeta(
        debugName: "list_login",
        argNames: ["query"],
      );

  @override
  Future<List<Note>> listNote({required String query, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(query, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_note,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kListNoteConstMeta,
      argValues: [query],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListNoteConstMeta => const TaskConstMeta(
        debugName: "list_note",
        argNames: ["query"],
      );

  @override
  Future<FinancialCard> postFinancialCard(
      {required FinancialCard data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_financial_card(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_financial_card,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kPostFinancialCardConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPostFinancialCardConstMeta => const TaskConstMeta(
        debugName: "post_financial_card",
        argNames: ["data"],
      );

  @override
  Future<IdentityCard> postIdentityCard(
      {required IdentityCard data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_identity_card(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_identity_card,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kPostIdentityCardConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPostIdentityCardConstMeta => const TaskConstMeta(
        debugName: "post_identity_card",
        argNames: ["data"],
      );

  @override
  Future<Login> postLogin({required Login data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_login(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_login,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kPostLoginConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPostLoginConstMeta => const TaskConstMeta(
        debugName: "post_login",
        argNames: ["data"],
      );

  @override
  Future<Note> postNote({required Note data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_note(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_note,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kPostNoteConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPostNoteConstMeta => const TaskConstMeta(
        debugName: "post_note",
        argNames: ["data"],
      );

  @override
  Future<FinancialCard> putFinancialCard(
      {required String id, required FinancialCard data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        sse_encode_box_autoadd_financial_card(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_financial_card,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kPutFinancialCardConstMeta,
      argValues: [id, data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPutFinancialCardConstMeta => const TaskConstMeta(
        debugName: "put_financial_card",
        argNames: ["id", "data"],
      );

  @override
  Future<IdentityCard> putIdentityCard(
      {required String id, required IdentityCard data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        sse_encode_box_autoadd_identity_card(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_identity_card,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kPutIdentityCardConstMeta,
      argValues: [id, data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPutIdentityCardConstMeta => const TaskConstMeta(
        debugName: "put_identity_card",
        argNames: ["id", "data"],
      );

  @override
  Future<Login> putLogin(
      {required String id, required Login data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        sse_encode_box_autoadd_login(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_login,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kPutLoginConstMeta,
      argValues: [id, data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPutLoginConstMeta => const TaskConstMeta(
        debugName: "put_login",
        argNames: ["id", "data"],
      );

  @override
  Future<Note> putNote({required String id, required Note data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        sse_encode_box_autoadd_note(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_note,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kPutNoteConstMeta,
      argValues: [id, data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPutNoteConstMeta => const TaskConstMeta(
        debugName: "put_note",
        argNames: ["id", "data"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  DateTime dco_decode_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Naive(raw);
  }

  @protected
  FinancialCard dco_decode_box_autoadd_financial_card(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_financial_card(raw);
  }

  @protected
  IdentityCard dco_decode_box_autoadd_identity_card(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_identity_card(raw);
  }

  @protected
  Login dco_decode_box_autoadd_login(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_login(raw);
  }

  @protected
  Note dco_decode_box_autoadd_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_note(raw);
  }

  @protected
  FinancialCard dco_decode_financial_card(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 15)
      throw Exception('unexpected arr length: expect 15 but see ${arr.length}');
    return FinancialCard(
      id: dco_decode_opt_String(arr[0]),
      createdAt: dco_decode_opt_box_autoadd_Chrono_Naive(arr[1]),
      createdBy: dco_decode_opt_String(arr[2]),
      updatedAt: dco_decode_opt_box_autoadd_Chrono_Naive(arr[3]),
      updatedBy: dco_decode_opt_String(arr[4]),
      cardHolderName: dco_decode_String(arr[5]),
      cardNumber: dco_decode_String(arr[6]),
      cardProviderName: dco_decode_opt_String(arr[7]),
      cardType: dco_decode_opt_String(arr[8]),
      cvv: dco_decode_opt_String(arr[9]),
      expiryDate: dco_decode_opt_String(arr[10]),
      issueDate: dco_decode_opt_String(arr[11]),
      name: dco_decode_String(arr[12]),
      note: dco_decode_opt_String(arr[13]),
      pin: dco_decode_opt_String(arr[14]),
    );
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  IdentityCard dco_decode_identity_card(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return IdentityCard(
      id: dco_decode_opt_String(arr[0]),
      createdAt: dco_decode_opt_box_autoadd_Chrono_Naive(arr[1]),
      createdBy: dco_decode_opt_String(arr[2]),
      updatedAt: dco_decode_opt_box_autoadd_Chrono_Naive(arr[3]),
      updatedBy: dco_decode_opt_String(arr[4]),
      name: dco_decode_String(arr[5]),
      note: dco_decode_opt_String(arr[6]),
      country: dco_decode_opt_String(arr[7]),
      expiryDate: dco_decode_opt_String(arr[8]),
      identityCardNumber: dco_decode_String(arr[9]),
      identityCardType: dco_decode_opt_String(arr[10]),
      issueDate: dco_decode_opt_String(arr[11]),
      nameOnCard: dco_decode_String(arr[12]),
      state: dco_decode_opt_String(arr[13]),
    );
  }

  @protected
  List<FinancialCard> dco_decode_list_financial_card(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_financial_card).toList();
  }

  @protected
  List<IdentityCard> dco_decode_list_identity_card(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_identity_card).toList();
  }

  @protected
  List<Login> dco_decode_list_login(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_login).toList();
  }

  @protected
  List<Note> dco_decode_list_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_note).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  Login dco_decode_login(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return Login(
      id: dco_decode_opt_String(arr[0]),
      createdAt: dco_decode_opt_box_autoadd_Chrono_Naive(arr[1]),
      createdBy: dco_decode_opt_String(arr[2]),
      updatedAt: dco_decode_opt_box_autoadd_Chrono_Naive(arr[3]),
      updatedBy: dco_decode_opt_String(arr[4]),
      name: dco_decode_String(arr[5]),
      note: dco_decode_opt_String(arr[6]),
      username: dco_decode_String(arr[7]),
      url: dco_decode_opt_String(arr[8]),
      password: dco_decode_opt_String(arr[9]),
      passwordHint: dco_decode_opt_String(arr[10]),
    );
  }

  @protected
  Note dco_decode_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return Note(
      id: dco_decode_opt_String(arr[0]),
      createdAt: dco_decode_opt_box_autoadd_Chrono_Naive(arr[1]),
      createdBy: dco_decode_opt_String(arr[2]),
      updatedAt: dco_decode_opt_box_autoadd_Chrono_Naive(arr[3]),
      updatedBy: dco_decode_opt_String(arr[4]),
      name: dco_decode_String(arr[5]),
      note: dco_decode_opt_String(arr[6]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Naive(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  DateTime sse_decode_Chrono_Naive(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner, isUtc: true);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Naive(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Naive(deserializer));
  }

  @protected
  FinancialCard sse_decode_box_autoadd_financial_card(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_financial_card(deserializer));
  }

  @protected
  IdentityCard sse_decode_box_autoadd_identity_card(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_identity_card(deserializer));
  }

  @protected
  Login sse_decode_box_autoadd_login(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_login(deserializer));
  }

  @protected
  Note sse_decode_box_autoadd_note(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_note(deserializer));
  }

  @protected
  FinancialCard sse_decode_financial_card(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_String(deserializer);
    var var_createdAt = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_createdBy = sse_decode_opt_String(deserializer);
    var var_updatedAt = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_updatedBy = sse_decode_opt_String(deserializer);
    var var_cardHolderName = sse_decode_String(deserializer);
    var var_cardNumber = sse_decode_String(deserializer);
    var var_cardProviderName = sse_decode_opt_String(deserializer);
    var var_cardType = sse_decode_opt_String(deserializer);
    var var_cvv = sse_decode_opt_String(deserializer);
    var var_expiryDate = sse_decode_opt_String(deserializer);
    var var_issueDate = sse_decode_opt_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_note = sse_decode_opt_String(deserializer);
    var var_pin = sse_decode_opt_String(deserializer);
    return FinancialCard(
        id: var_id,
        createdAt: var_createdAt,
        createdBy: var_createdBy,
        updatedAt: var_updatedAt,
        updatedBy: var_updatedBy,
        cardHolderName: var_cardHolderName,
        cardNumber: var_cardNumber,
        cardProviderName: var_cardProviderName,
        cardType: var_cardType,
        cvv: var_cvv,
        expiryDate: var_expiryDate,
        issueDate: var_issueDate,
        name: var_name,
        note: var_note,
        pin: var_pin);
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt64();
  }

  @protected
  IdentityCard sse_decode_identity_card(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_String(deserializer);
    var var_createdAt = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_createdBy = sse_decode_opt_String(deserializer);
    var var_updatedAt = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_updatedBy = sse_decode_opt_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_note = sse_decode_opt_String(deserializer);
    var var_country = sse_decode_opt_String(deserializer);
    var var_expiryDate = sse_decode_opt_String(deserializer);
    var var_identityCardNumber = sse_decode_String(deserializer);
    var var_identityCardType = sse_decode_opt_String(deserializer);
    var var_issueDate = sse_decode_opt_String(deserializer);
    var var_nameOnCard = sse_decode_String(deserializer);
    var var_state = sse_decode_opt_String(deserializer);
    return IdentityCard(
        id: var_id,
        createdAt: var_createdAt,
        createdBy: var_createdBy,
        updatedAt: var_updatedAt,
        updatedBy: var_updatedBy,
        name: var_name,
        note: var_note,
        country: var_country,
        expiryDate: var_expiryDate,
        identityCardNumber: var_identityCardNumber,
        identityCardType: var_identityCardType,
        issueDate: var_issueDate,
        nameOnCard: var_nameOnCard,
        state: var_state);
  }

  @protected
  List<FinancialCard> sse_decode_list_financial_card(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FinancialCard>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_financial_card(deserializer));
    }
    return ans_;
  }

  @protected
  List<IdentityCard> sse_decode_list_identity_card(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <IdentityCard>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_identity_card(deserializer));
    }
    return ans_;
  }

  @protected
  List<Login> sse_decode_list_login(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Login>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_login(deserializer));
    }
    return ans_;
  }

  @protected
  List<Note> sse_decode_list_note(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Note>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_note(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Login sse_decode_login(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_String(deserializer);
    var var_createdAt = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_createdBy = sse_decode_opt_String(deserializer);
    var var_updatedAt = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_updatedBy = sse_decode_opt_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_note = sse_decode_opt_String(deserializer);
    var var_username = sse_decode_String(deserializer);
    var var_url = sse_decode_opt_String(deserializer);
    var var_password = sse_decode_opt_String(deserializer);
    var var_passwordHint = sse_decode_opt_String(deserializer);
    return Login(
        id: var_id,
        createdAt: var_createdAt,
        createdBy: var_createdBy,
        updatedAt: var_updatedAt,
        updatedBy: var_updatedBy,
        name: var_name,
        note: var_note,
        username: var_username,
        url: var_url,
        password: var_password,
        passwordHint: var_passwordHint);
  }

  @protected
  Note sse_decode_note(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_String(deserializer);
    var var_createdAt = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_createdBy = sse_decode_opt_String(deserializer);
    var var_updatedAt = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_updatedBy = sse_decode_opt_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_note = sse_decode_opt_String(deserializer);
    return Note(
        id: var_id,
        createdAt: var_createdAt,
        createdBy: var_createdBy,
        updatedAt: var_updatedAt,
        updatedBy: var_updatedBy,
        name: var_name,
        note: var_note);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Naive(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Naive(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ((');
  }

  @protected
  void sse_encode_Chrono_Naive(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.microsecondsSinceEpoch, serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Naive(
      DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Naive(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_financial_card(
      FinancialCard self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_financial_card(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_identity_card(
      IdentityCard self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_identity_card(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_login(Login self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_login(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_note(Note self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_note(self, serializer);
  }

  @protected
  void sse_encode_financial_card(FinancialCard self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.id, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.createdAt, serializer);
    sse_encode_opt_String(self.createdBy, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.updatedAt, serializer);
    sse_encode_opt_String(self.updatedBy, serializer);
    sse_encode_String(self.cardHolderName, serializer);
    sse_encode_String(self.cardNumber, serializer);
    sse_encode_opt_String(self.cardProviderName, serializer);
    sse_encode_opt_String(self.cardType, serializer);
    sse_encode_opt_String(self.cvv, serializer);
    sse_encode_opt_String(self.expiryDate, serializer);
    sse_encode_opt_String(self.issueDate, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.note, serializer);
    sse_encode_opt_String(self.pin, serializer);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_identity_card(IdentityCard self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.id, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.createdAt, serializer);
    sse_encode_opt_String(self.createdBy, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.updatedAt, serializer);
    sse_encode_opt_String(self.updatedBy, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.note, serializer);
    sse_encode_opt_String(self.country, serializer);
    sse_encode_opt_String(self.expiryDate, serializer);
    sse_encode_String(self.identityCardNumber, serializer);
    sse_encode_opt_String(self.identityCardType, serializer);
    sse_encode_opt_String(self.issueDate, serializer);
    sse_encode_String(self.nameOnCard, serializer);
    sse_encode_opt_String(self.state, serializer);
  }

  @protected
  void sse_encode_list_financial_card(
      List<FinancialCard> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_financial_card(item, serializer);
    }
  }

  @protected
  void sse_encode_list_identity_card(
      List<IdentityCard> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_identity_card(item, serializer);
    }
  }

  @protected
  void sse_encode_list_login(List<Login> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_login(item, serializer);
    }
  }

  @protected
  void sse_encode_list_note(List<Note> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_note(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_login(Login self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.id, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.createdAt, serializer);
    sse_encode_opt_String(self.createdBy, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.updatedAt, serializer);
    sse_encode_opt_String(self.updatedBy, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.note, serializer);
    sse_encode_String(self.username, serializer);
    sse_encode_opt_String(self.url, serializer);
    sse_encode_opt_String(self.password, serializer);
    sse_encode_opt_String(self.passwordHint, serializer);
  }

  @protected
  void sse_encode_note(Note self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.id, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.createdAt, serializer);
    sse_encode_opt_String(self.createdBy, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.updatedAt, serializer);
    sse_encode_opt_String(self.updatedBy, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.note, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Naive(
      DateTime? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Naive(self, serializer);
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
